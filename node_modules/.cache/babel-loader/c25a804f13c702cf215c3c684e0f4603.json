{"ast":null,"code":"var _jsxFileName = \"/Users/annaqzhou/go/src/plantastic/client/src/Components/Garden/PlantGroup.js\";\nimport React, { Component, useState } from 'react';\nimport Plant from \"./Plant\";\nimport { Row } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class PlantGroup extends React.Component {\n  constructor(props) {\n    super(props); // this.state = {\n    //     // error: null,\n    //     // isLoaded: false,\n    //     // items: {this.props.plants}\n    //     // authHeader: this.props.authHeader\n    // };\n    // this.stuff = this.props.plants;\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      stuff: this.props.plants\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://verdancy.capstone.ischool.uw.edu/v1/UserPlants/\", {\n      method: 'GET',\n      headers: new Headers({\n        'Authorization': this.state.authHeader\n      })\n    }).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    // const {error, isLoaded, items} = this.state;\n    // console.log(this.props.plants);\n    // console.log(this.stuff)\n    // console.log(this.state.auth)\n    let plants = [];\n\n    for (let i = 0; i < this.state.items.length; i++) {\n      // plants.push(<Plant img={this.state.stuff[i].ImageLink}\n      //                     pName={this.state.stuff[i].PlantName}\n      //                     quantity={this.state.stuff[i].Total}\n      //                     totCarbon={this.state.stuff[i].TotalCO2}\n      //                     pID={this.state.stuff[i].PlantID} />);\n      plants.push( /*#__PURE__*/_jsxDEV(Plant, {\n        img: this.state.items[i].ImageLink,\n        pName: this.state.items[i].PlantName,\n        quantity: this.state.items[i].Total,\n        totCarbon: this.state.items[i].TotalCO2,\n        pID: this.state.items[i].PlantID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }, this));\n    } // if (error) {\n    //     return <div>Error: {error.message}</div>\n    // } else if (!isLoaded) {\n    //     return <div>Loading...</div>\n    // } else {\n    //     return (\n    //         <div>\n    //             <Row>\n    //                 {/* {plants} */}\n    //                 {\n    //                     items.map(item => (\n    //                         <Plant />\n    //                     ))\n    //                 }\n    //             </Row>\n    //         </div>\n    //     )\n    // }\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: plants\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/annaqzhou/go/src/plantastic/client/src/Components/Garden/PlantGroup.js"],"names":["React","Component","useState","Plant","Row","PlantGroup","constructor","props","state","error","isLoaded","items","stuff","plants","componentDidMount","fetch","method","headers","Headers","authHeader","then","res","json","result","setState","render","i","length","push","ImageLink","PlantName","Total","TotalCO2","PlantID"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAAQC,GAAR,QAAkB,iBAAlB;;AAEA,OAAO,MAAMC,UAAN,SAAyBL,KAAK,CAACC,SAA/B,CAAyC;AAC5CK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,IADE;AAETC,MAAAA,QAAQ,EAAE,KAFD;AAGTC,MAAAA,KAAK,EAAE,EAHE;AAITC,MAAAA,KAAK,EAAE,KAAKL,KAAL,CAAWM;AAJT,KAAb;AAMH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,yDAAD,EAA4D;AAC7DC,MAAAA,MAAM,EAAE,KADqD;AAE7DC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACjB,yBAAiB,KAAKV,KAAL,CAAWW;AADX,OAAZ;AAFoD,KAA5D,CAAL,CAMKC,IANL,CAMUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANjB,EAOKF,IAPL,CAQSG,MAAD,IAAY;AACR,WAAKC,QAAL,CAAc;AACVd,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,KAAK,EAAEY;AAFG,OAAd;AAIH,KAbT,EAcSd,KAAD,IAAW;AACP,WAAKe,QAAL,CAAc;AACVd,QAAAA,QAAQ,EAAE,IADA;AAEVD,QAAAA;AAFU,OAAd;AAIH,KAnBT;AAqBH;;AAEDgB,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA;AACA,QAAIZ,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKlB,KAAL,CAAWG,KAAX,CAAiBgB,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAC9C;AACA;AACA;AACA;AACA;AACAb,MAAAA,MAAM,CAACe,IAAP,eAAY,QAAC,KAAD;AAAO,QAAA,GAAG,EAAE,KAAKpB,KAAL,CAAWG,KAAX,CAAiBe,CAAjB,EAAoBG,SAAhC;AACI,QAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWG,KAAX,CAAiBe,CAAjB,EAAoBI,SAD/B;AAEI,QAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWG,KAAX,CAAiBe,CAAjB,EAAoBK,KAFlC;AAGI,QAAA,SAAS,EAAE,KAAKvB,KAAL,CAAWG,KAAX,CAAiBe,CAAjB,EAAoBM,QAHnC;AAII,QAAA,GAAG,EAAE,KAAKxB,KAAL,CAAWG,KAAX,CAAiBe,CAAjB,EAAoBO;AAJ7B;AAAA;AAAA;AAAA;AAAA,cAAZ;AAKH,KAlBI,CAmBL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,wBACI;AAAA,6BACI,QAAC,GAAD;AAAA,kBACKpB;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAtF2C","sourcesContent":["import React, {Component, useState} from 'react';\nimport Plant from \"./Plant\";\nimport {Row} from 'react-bootstrap';\n\nexport class PlantGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        // this.state = {\n        //     // error: null,\n        //     // isLoaded: false,\n        //     // items: {this.props.plants}\n        //     // authHeader: this.props.authHeader\n        // };\n        // this.stuff = this.props.plants;\n        this.state = {\n            error: null,\n            isLoaded: false,\n            items: [],\n            stuff: this.props.plants\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://verdancy.capstone.ischool.uw.edu/v1/UserPlants/\", {\n            method: 'GET',\n            headers: new Headers({\n                'Authorization': this.state.authHeader\n            })\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        items: result\n                    });\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        // const {error, isLoaded, items} = this.state;\n        // console.log(this.props.plants);\n        // console.log(this.stuff)\n        // console.log(this.state.auth)\n        let plants = [];\n        \n        for (let i = 0; i < this.state.items.length; i++) {\n            // plants.push(<Plant img={this.state.stuff[i].ImageLink}\n            //                     pName={this.state.stuff[i].PlantName}\n            //                     quantity={this.state.stuff[i].Total}\n            //                     totCarbon={this.state.stuff[i].TotalCO2}\n            //                     pID={this.state.stuff[i].PlantID} />);\n            plants.push(<Plant img={this.state.items[i].ImageLink}\n                            pName={this.state.items[i].PlantName}\n                            quantity={this.state.items[i].Total}\n                            totCarbon={this.state.items[i].TotalCO2}\n                            pID={this.state.items[i].PlantID} />);\n        }\n        // if (error) {\n        //     return <div>Error: {error.message}</div>\n        // } else if (!isLoaded) {\n        //     return <div>Loading...</div>\n        // } else {\n        //     return (\n        //         <div>\n        //             <Row>\n        //                 {/* {plants} */}\n        //                 {\n        //                     items.map(item => (\n        //                         <Plant />\n        //                     ))\n        //                 }\n        //             </Row>\n        //         </div>\n        //     )\n        // }\n        return (\n            <div>\n                <Row>\n                    {plants}\n                </Row>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}