{"ast":null,"code":"var _jsxFileName = \"/Users/annaqzhou/INFO/Capstone/verdancy-client/src/Components/Garden/PlantGroup.js\";\nimport React, { Component, useState } from 'react';\nimport Plant from \"./Plant\";\nimport { Row } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class PlantGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      // items: this.props.plants,\n      stuff: this.props.stuff,\n      auth: localStorage.getItem(\"Authorization\")\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://verdancy.capstone.ischool.uw.edu/v1/UserPlants/\", {\n      method: 'GET',\n      headers: new Headers({\n        'Authorization': this.state.auth\n      })\n    }).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      items\n    } = this.state; // console.log(this.props.plants);\n\n    console.log(this.state.stuff); // console.log(this.state.auth)\n\n    let plants = [];\n\n    for (let i = 0; i < this.state.items.length; i++) {\n      // plants.push(<Plant img={this.state.stuff[i].ImageLink}\n      //                     pName={this.state.stuff[i].PlantName}\n      //                     quantity={this.state.stuff[i].Total}\n      //                     totCarbon={this.state.stuff[i].TotalCO2}\n      //                     pID={this.state.stuff[i].PlantID} />);\n      plants.push( /*#__PURE__*/_jsxDEV(Plant, {\n        img: this.state.items[i].ImageLink,\n        pName: this.state.items[i].PlantName,\n        quantity: this.state.items[i].Total,\n        totCarbon: this.state.items[i].TotalCO2,\n        pID: this.state.items[i].PlantID,\n        co2: this.state.items[i].CO2PerUnit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }, this));\n    }\n\n    if (this.state.error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", this.state.error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 20\n      }, this);\n    } else if (!this.state.isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: plants\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this);\n    } // return (\n    //     <div>\n    //         <Row>\n    //             {plants}\n    //         </Row>\n    //     </div>\n    // )\n\n  }\n\n}","map":{"version":3,"sources":["/Users/annaqzhou/INFO/Capstone/verdancy-client/src/Components/Garden/PlantGroup.js"],"names":["React","Component","useState","Plant","Row","PlantGroup","constructor","props","state","error","isLoaded","items","stuff","auth","localStorage","getItem","componentDidMount","fetch","method","headers","Headers","then","res","json","result","setState","render","console","log","plants","i","length","push","ImageLink","PlantName","Total","TotalCO2","PlantID","CO2PerUnit","message"],"mappings":"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","sourcesContent":["import React, {Component, useState} from 'react';\nimport Plant from \"./Plant\";\nimport {Row} from 'react-bootstrap';\n\nexport class PlantGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            items: [],\n            // items: this.props.plants,\n            stuff: this.props.stuff,\n            auth: localStorage.getItem(\"Authorization\")\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://verdancy.capstone.ischool.uw.edu/v1/UserPlants/\", {\n            method: 'GET',\n            headers: new Headers({\n                'Authorization': this.state.auth\n            })\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        items: result\n                    });\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const {error, isLoaded, items} = this.state;\n        // console.log(this.props.plants);\n        console.log(this.state.stuff)\n        // console.log(this.state.auth)\n        let plants = [];\n        \n        for (let i = 0; i < this.state.items.length; i++) {\n            // plants.push(<Plant img={this.state.stuff[i].ImageLink}\n            //                     pName={this.state.stuff[i].PlantName}\n            //                     quantity={this.state.stuff[i].Total}\n            //                     totCarbon={this.state.stuff[i].TotalCO2}\n            //                     pID={this.state.stuff[i].PlantID} />);\n            plants.push(<Plant img={this.state.items[i].ImageLink}\n                            pName={this.state.items[i].PlantName}\n                            quantity={this.state.items[i].Total}\n                            totCarbon={this.state.items[i].TotalCO2}\n                            pID={this.state.items[i].PlantID} \n                            co2={this.state.items[i].CO2PerUnit} />);\n        }\n        if (this.state.error) {\n            return <div>Error: {this.state.error.message}</div>\n        } else if (!this.state.isLoaded) {\n            return <div>Loading...</div>\n        } else {\n            return (\n                <div>\n                    <Row>\n                        {plants}\n                    </Row>\n                </div>\n            )\n        }\n        // return (\n        //     <div>\n        //         <Row>\n        //             {plants}\n        //         </Row>\n        //     </div>\n        // )\n    }\n}"]},"metadata":{},"sourceType":"module"}