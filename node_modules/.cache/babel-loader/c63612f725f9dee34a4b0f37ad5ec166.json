{"ast":null,"code":"var _jsxFileName = \"/Users/annaqzhou/go/src/plantastic/client/src/Components/Auth/Components/SignUp/SignUp.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SignForm from '../SignForm/SignForm';\nimport api from '../../../../Constants/APIEndpoints/APIEndpoints';\nimport Errors from '../../../Errors/Errors';\nimport PageTypes from '../../../../Constants/PageTypes/PageTypes';\n/**\n * @class\n * @classdesc SignUp handles the sign up component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setField = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.setError = error => {\n      this.setState({\n        error\n      });\n    };\n\n    this.submitForm = async e => {\n      e.preventDefault();\n      const {\n        email,\n        firstName,\n        lastName,\n        password,\n        passwordConf\n      } = this.state;\n      const sendData = {\n        email,\n        firstName,\n        lastName,\n        password,\n        passwordConf\n      };\n      const response = await fetch(api.base + api.handlers.users, {\n        method: \"POST\",\n        body: JSON.stringify(sendData),\n        headers: new Headers({\n          \"Content-Type\": \"application/json\"\n        })\n      });\n\n      if (response.status >= 300) {\n        const error = await response.text();\n        this.setError(error);\n        return;\n      }\n\n      const authToken = response.headers.get(\"Authorization\");\n      localStorage.setItem(\"Authorization\", authToken);\n      this.setError(\"\");\n      this.props.setAuthToken(authToken);\n      const user = await response.json();\n      this.props.setUser(user);\n    };\n\n    this.state = {\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      password: \"\",\n      passwordConf: \"\",\n      error: \"\"\n    };\n    this.fields = [{\n      name: \"Email\",\n      key: \"email\"\n    }, {\n      name: \"First name\",\n      key: \"firstName\"\n    }, {\n      name: \"Last name\",\n      key: \"lastName\"\n    }, {\n      name: \"Password\",\n      key: \"password\"\n    }, {\n      name: \"Password Confirmation\",\n      key: \"passwordConf\"\n    }];\n  }\n  /**\n   * @description setField will set the field for the provided argument\n   */\n\n\n  render() {\n    const values = this.state;\n    const {\n      error\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Errors, {\n        error: error,\n        setError: this.setError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(SignForm, {\n        setField: this.setField,\n        submitForm: this.submitForm,\n        values: values,\n        fields: this.fields\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => this.props.setPage(e, PageTypes.signIn),\n        children: \"Sign in instead\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nSignUp.propTypes = {\n  setPage: PropTypes.func,\n  setAuthToken: PropTypes.func\n};\nexport default SignUp;","map":{"version":3,"sources":["/Users/annaqzhou/go/src/plantastic/client/src/Components/Auth/Components/SignUp/SignUp.js"],"names":["React","Component","PropTypes","SignForm","api","Errors","PageTypes","SignUp","constructor","props","setField","e","setState","target","name","value","setError","error","submitForm","preventDefault","email","firstName","lastName","password","passwordConf","state","sendData","response","fetch","base","handlers","users","method","body","JSON","stringify","headers","Headers","status","text","authToken","get","localStorage","setItem","setAuthToken","user","json","setUser","fields","key","render","values","setPage","signIn","propTypes","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SignForm from '../SignForm/SignForm';\nimport api from '../../../../Constants/APIEndpoints/APIEndpoints';\nimport Errors from '../../../Errors/Errors';\nimport PageTypes from '../../../../Constants/PageTypes/PageTypes';\n\n/**\n * @class\n * @classdesc SignUp handles the sign up component\n */\nclass SignUp extends Component {\n    static propTypes = {\n        setPage: PropTypes.func,\n        setAuthToken: PropTypes.func\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            password: \"\",\n            passwordConf: \"\",\n            error: \"\"\n        };\n\n        this.fields = [\n            {\n                name: \"Email\",\n                key: \"email\"\n            },\n            {\n                name: \"First name\",\n                key: \"firstName\"\n            },\n            {\n                name: \"Last name\",\n                key: \"lastName\"\n            },\n            {\n                name: \"Password\",\n                key: \"password\"\n            },\n            {\n                name: \"Password Confirmation\",\n                key: \"passwordConf\"\n            }];\n    }\n\n    /**\n     * @description setField will set the field for the provided argument\n     */\n    setField = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    /**\n     * @description setError sets the error message\n     */\n    setError = (error) => {\n        this.setState({ error })\n    }\n\n    /**\n     * @description submitForm handles the form submission\n     */\n    submitForm = async (e) => {\n        e.preventDefault();\n        const { email,\n            firstName,\n            lastName,\n            password,\n            passwordConf } = this.state;\n        const sendData = {\n            email,\n            firstName,\n            lastName,\n            password,\n            passwordConf\n        };\n        const response = await fetch(api.base + api.handlers.users, {\n            method: \"POST\",\n            body: JSON.stringify(sendData),\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n        if (response.status >= 300) {\n            const error = await response.text();\n            this.setError(error);\n            return;\n        }\n        const authToken = response.headers.get(\"Authorization\")\n        localStorage.setItem(\"Authorization\", authToken);\n        this.setError(\"\");\n        this.props.setAuthToken(authToken);\n        const user = await response.json();\n        this.props.setUser(user);\n    }\n\n    render() {\n        const values = this.state;\n        const { error } = this.state;\n        return <>\n            <Errors error={error} setError={this.setError} />\n            <SignForm\n                setField={this.setField}\n                submitForm={this.submitForm}\n                values={values}\n                fields={this.fields} />\n            <button onClick={(e) => this.props.setPage(e, PageTypes.signIn)}>Sign in instead</button>\n        </>\n    }\n}\n\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}